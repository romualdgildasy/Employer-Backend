export declare const validatorsMap: {
    string: {
        optional: () => string;
        required: (v: any) => boolean;
        type: (v: any) => boolean;
        min: (v: string, minLength: number, trim?: boolean) => boolean;
        max: (v: string, maxLength: number, trim?: boolean) => boolean;
        match: (v: string, pattern: RegExp) => RegExpMatchArray | null;
        enum: (v: string, enums: string[]) => boolean;
        email: (v: string) => RegExpMatchArray | null;
    };
    boolean: {
        type: (v: any) => boolean;
        optional: () => string;
        required: (v: any) => boolean;
    };
    number: {
        optional: () => string;
        required: (v: any) => boolean;
        type: (v: any) => boolean;
        integer: (v: any) => boolean;
        le: (v: number, valueToCompareWith: number) => boolean;
        ge: (v: number, valueToCompareWith: number) => boolean;
        eq: (v: number, valueToCompareWith: number) => boolean;
        gt: (v: number, valueToCompareWith: number) => boolean;
        lt: (v: number, valueToCompareWith: number) => boolean;
        btw: (v: number, min: number, max: number) => boolean;
    };
    array: {
        type: (v: any) => boolean;
        optional: () => string;
        required: (v: any) => boolean;
        ofType: (v: any[], type: "string" | "number" | "boolean" | "object") => boolean;
        ofMinSize: (v: any[], minSize: number) => boolean;
        ofMaxSize: (v: any[], maxSize: number) => boolean;
        ofSize: (v: any[], size: number) => boolean;
    };
    object: {
        type: (v: any) => boolean;
        optional: () => string;
        required: (v: any) => boolean;
    };
};
